apply plugin: 'com.android.feature'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {}
        release {
            Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('../local.properties')))

            storeFile file(localProps["RELEASE_STORE_FILE"])
            keyAlias localProps["RELEASE_KEY_ALIAS"]
            storePassword localProps["RELEASE_STORE_PASSWORD"]
            keyPassword localProps["RELEASE_KEY_PASSWORD"]
        }
    }

    buildTypes {
        debug {
            resValue "bool", "is_release", "false"
        }

        release {
            resValue "bool", "is_release", "true"
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

dependencies {
    implementation project(':base')

    implementation "com.google.android.instantapps:instantapps:${rootProject.instant_app}"
    implementation "com.google.dagger:dagger:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"

    // Dagger Android
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$project.dagger"

    /*############################### Test ibs ###################################*/
    testImplementation "junit:junit:${rootProject.junit}"
    androidTestImplementation "androidx.test:runner:${rootProject.runner}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${rootProject.kotlin_version}"

    // Mokito
    testImplementation "org.mockito:mockito-core:${rootProject.mockitoVersion}"

    // Mockserver for resquest mock
    testImplementation "br.com.concretesolutions:requestmatcher:${rootProject.requestMatcherVersion}"
    androidTestImplementation "br.com.concretesolutions:requestmatcher:${rootProject.requestMatcherVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.mockwebserver}"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.mockwebserver}"

    // Arch Test for Archtecture components test
    testImplementation("androidx.arch.core:core-testing:${rootProject.core_testing}", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    // Espresso for UI test
    androidTestImplementation("androidx.test.espresso:espresso-core:${rootProject.espresso_core}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.test.espresso:espresso-contrib:${rootProject.espresso_contrib}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.test.espresso:espresso-intents:${rootProject.espresso_intents}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    testImplementation "androidx.test.espresso:espresso-idling-resource:${rootProject.espresso_idling_resource}"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${rootProject.uiautomator}"
    /*############################################################################*/
}
