apply plugin: 'com.android.feature'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

android {

    compileSdkVersion rootProject.compileSdkVersion
    baseFeature true

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }


    def keystoreProperties = new Properties()
    def keystorePropertiesFile = file('../local.properties')
    def env = System.getenv()

    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    } else {

        // Load keystore properties from environment or set their default values

        if (env['KEYSTORE_HOME']) keystoreProperties.put('RELEASE_STORE_FILE', env['RELEASE_STORE_FILE'])
        else keystoreProperties.put('RELEASE_STORE_FILE', "../remotejobs.jks")

        if (env['KEYSTORE_ALIAS']) keystoreProperties.put('RELEASE_KEY_ALIAS', env['RELEASE_KEY_ALIAS'])
        else keystoreProperties.put('RELEASE_KEY_ALIAS', "myDefaultAlias")

        if (env['KEYSTORE_KEY_PASS']) keystoreProperties.put('RELEASE_STORE_PASSWORD', env['RELEASE_STORE_PASSWORD'])
        else keystoreProperties.put('RELEASE_STORE_PASSWORD', "myDefaultStorePass")

        if (env['KEYSTORE_KEY_PASS']) keystoreProperties.put('RELEASE_KEY_PASSWORD', env['RELEASE_KEY_PASSWORD'])
        else keystoreProperties.put('RELEASE_KEY_PASSWORD', "myDefaultKeyPass")
    }

    signingConfigs {
        debug {}
        release {
            storeFile file(keystoreProperties["RELEASE_STORE_FILE"])
            keyAlias keystoreProperties["RELEASE_KEY_ALIAS"]
            storePassword keystoreProperties["RELEASE_STORE_PASSWORD"]
            keyPassword keystoreProperties["RELEASE_KEY_PASSWORD"]
        }
    }

    buildTypes {
        debug {
            resValue "bool", "is_release", "false"
        }

        release {
            resValue "bool", "is_release", "true"
            minifyEnabled true
            signingConfig signingConfigs.release
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

androidExtensions {
    experimental = true
}

crashlytics { instantAppSupport true }

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*###################### Android support  libs ###############################*/
    api("androidx.appcompat:appcompat:${rootProject.appcompat}") {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    api "androidx.legacy:legacy-support-v4:${rootProject.legacy_support_v4}"
    api "androidx.constraintlayout:constraintlayout:${rootProject.constraintlayout}"
    api("com.google.android.material:material:${rootProject.material}") {
        exclude module: 'animated-vector-drawable'
    }
    api "com.google.android:flexbox:${rootProject.flexbox}"
    api "androidx.multidex:multidex:${rootProject.multidex}"
    api "org.apache.commons:commons-text:${rootProject.commons_text}"
    implementation "com.google.android.instantapps:instantapps:${rootProject.instant_app}"
    /*############################################################################*/

    /*############################## Firebase #####################################*/
    api "com.google.firebase:firebase-core:${rootProject.firebase}"
    api "com.google.firebase:firebase-messaging:${rootProject.firebase_message}"
    /*############################################################################*/

    /*############################# Crashlytics ####################################*/
    api("com.crashlytics.sdk.android:crashlytics:${rootProject.crashlytics}@aar") {
        transitive = true
    }
    /*############################################################################*/

    /*########################## kotlin ##########################################*/
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlin_version"
    api "org.jetbrains.anko:anko-coroutines:${rootProject.anko_version}"
    api "org.jetbrains.anko:anko-commons:${rootProject.anko_version}"
    /*############################################################################*/

    /*########################### ReactiveX ######################################*/
    api "io.reactivex.rxjava2:rxandroid:${rootProject.rxandroid}"
    api "io.reactivex.rxjava2:rxjava:${rootProject.rxjava}"
    /*############################################################################*/

    /*############################ Retrofit ######################################*/
    api "com.squareup.retrofit2:adapter-rxjava2:${rootProject.retrofit}"
    api "com.squareup.retrofit2:retrofit:${rootProject.retrofit}"
    /*############################################################################*/

    /*############################ Gson: Json Converter ##########################*/
    api "com.squareup.retrofit2:converter-gson:${rootProject.retrofit}"
    api "com.google.code.gson:gson:${rootProject.gson}"
    /*############################################################################*/

    /*########################### Image libs #####################################*/
    api "com.squareup.picasso:picasso:${rootProject.picasso}"
    /*############################################################################*/

    /*########################### Animation #####################################*/
    api "com.airbnb.android:lottie:${rootProject.lottie}"
    /*############################################################################*/

    /*######################## Architetures Components ###########################*/
    // Room Database
    api "androidx.room:room-runtime:${rootProject.room_runtime}"
    api "androidx.room:room-rxjava2:${rootProject.room_rxjava2}"
    /*api "android.arch.persistence.room:testing:${rootProject.arch}"*/
    kapt "androidx.room:room-compiler:${rootProject.room_compiler}"

    // Lifecycle
    api "androidx.lifecycle:lifecycle-runtime:${rootProject.lifecycle_runtime}"
    api "androidx.lifecycle:lifecycle-extensions:${rootProject.lifecycle_extensions}"
    kapt "androidx.lifecycle:lifecycle-compiler:${rootProject.lifecycle_compiler}"

    //implementation "android.arch.navigation:navigation-fragment-ktx:${rootProject.nav_version}"
    //implementation "android.arch.navigation:navigation-ui-ktx:${rootProject.nav_version}"
    /*############################################################################*/

    /*######################## Dependency injection ###########################*/
    // Dagger Core
    api "com.google.dagger:dagger:$project.dagger"
    kapt "com.google.dagger:dagger-compiler:$project.dagger"

    // Dagger Android
    api "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$project.dagger"
    /*############################################################################*/

    /*############################### Test ibs ###################################*/
    testImplementation "junit:junit:${rootProject.junit}"
    androidTestImplementation "androidx.test:runner:${rootProject.runner}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${rootProject.kotlin_version}"

    // Mokito
    testImplementation "org.mockito:mockito-core:${rootProject.mockitoVersion}"

    // Mockserver for resquest mock
    testImplementation "br.com.concretesolutions:requestmatcher:${rootProject.requestMatcherVersion}"
    androidTestImplementation "br.com.concretesolutions:requestmatcher:${rootProject.requestMatcherVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.mockwebserver}"

    // Arch Test for Archtecture components test
    testImplementation("androidx.arch.core:core-testing:${rootProject.core_testing}", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    // Espresso for UI test
    androidTestImplementation("androidx.test.espresso:espresso-core:${rootProject.espresso_core}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.test.espresso:espresso-contrib:${rootProject.espresso_contrib}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.test.espresso:espresso-intents:${rootProject.espresso_intents}", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    testImplementation "androidx.test.espresso:espresso-idling-resource:${rootProject.espresso_idling_resource}"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:${rootProject.uiautomator}"
    /*############################################################################*/

    application project(':installed')
    feature project(':splash')
    feature project(':home')
    feature project(":companies")
    feature project(":highestpaid")
}
apply plugin: 'com.google.gms.google-services'
